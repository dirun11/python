def print_items:
  for i in range(n):
    print(i)
print(10)

O/P : 0 1 2 3 4 5 6 7 8 9

O(N): We passed number n as an argument to the function and then it is been iterated n times.
      So, whatever N was that was the number of operations
NOTE: Proportional in BigO is O(N), reason graph
---------------------------------------------------------------------------------------------------
def print_items:
  for i in range(n):
    print(i)

  for j in range(n):
    print(j)
print(10)

O/P: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 = n+n = 2n = O(2n)= O(n)
This is a use case for "Droping Constants"
----------------------------------------------------------------------------------------------------
def print_items:
  for i in range(n):
    for j in range(n):
      print(i,j)
print(10)

O/P: 0 0, 0 1, 0 2, 0 3, .... 9 9 = n*n = O(n^2)      # in O/p ',' is excluded 
-------------------------------------------------------------------------------------------------------
Drop Non-Dominants

def print_items:
  for i in range(n):
    for j in range(n):
      print(i,j)

  for k in range(n):
    print(k)
print(10)

O/P : 0 0, 0 1, 0 2, 0 3, .... 9 9,  0,1,2, .. , 9
       -------- O(n^2) --------- + ----- O(n)------ = O(n^2 + n) => When n is a large number in general it is so the %age of the total number of operations become insignificant( it about the n). 
    n^2 is the dominant term and n is non domiant term = O(n^2)
--------------------------------------------------------------------------------------------------------
O(1)

def add_items(n):
  return n + n 
The only operation is the addition("+"), so if it's a thousand (n) we will still have "+" only. 

def add_items(n):
  return n + n + n 
O(1) = Constant time = as n increase the number of operations will remain constant. 
-------------------------------------------------------------------------------------------------------
let's say there are numbers from 1-8 
1 2 3 4 5 6 7 8 (sorted)

let's find any number in the list, let say 1
now break the list of numbers in half 

1 2 3 4  || 5 6 7 8
1 2 || 3 4
1 || 2
we took 3 steps to find a number(1) from eight numbers 

let say we have 1,07,37,41,824 = This number will be cut into half 31 times. 

So, the above cases are examples of O(log n)
--------------------------------------------------------------------------------------------------------

